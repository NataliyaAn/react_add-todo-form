{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","person","className","href","email","name","TodoInfo","todo","id","classNames","completed","title","user","TodoList","todos","map","username","getUser","userId","usersFromServer","find","App","useState","todosList","newTodoTitle","setTodoTitle","personID","setPerson","notValidPerson","setErrorUser","errorTittle","setErrorTittle","startId","forEach","action","method","onSubmit","event","preventDefault","trim","addTodo","push","type","placeholder","value","onChange","target","Number","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d1de0d75.chunk.js","sourcesContent":["import React from 'react';\nimport { Person } from '../../type';\n\ntype Props = {\n  person: Person,\n};\n\nexport const UserInfo: React.FC<Props> = ({ person }) => {\n  return (\n    <a\n      className=\"UserInfo\"\n      href={`mailto:${person.email}`}\n    >\n      {person.name}\n    </a>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { TodoWithPerson } from '../../type';\n\n// import { stringify } from \"querystring\";\n\ntype Props = {\n  todo: TodoWithPerson;\n};\n\nexport const TodoInfo:React.FC< Props > = ({\n  todo,\n}) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={classNames(\n        'TodoInfo',\n        { 'TodoInfo--completed': todo.completed },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      {todo.user && <UserInfo person={todo.user} /> }\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { TodoWithPerson } from '../../type';\n\ntype Props = {\n  todos: TodoWithPerson[];\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n}) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\nimport { TodoWithPerson, Person } from './type';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nfunction getUser(userId: number): Person | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nconst todos: TodoWithPerson[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App:React.FC = () => {\n  const [todosList] = useState([...todos]);\n  const [newTodoTitle, setTodoTitle] = useState('');\n  const [personID, setPerson] = useState(0);\n  const [notValidPerson, setErrorUser] = useState(false);\n  const [errorTittle, setErrorTittle] = useState(false);\n\n  let startId = 0;\n\n  todosList.forEach(todo => {\n    startId = (todo.id > startId)\n      ? todo.id\n      : startId;\n  });\n\n  const handleTodoTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTodoTitle(event.target.value);\n    setErrorTittle(false);\n  };\n\n  const handlePersonIDSelect = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    setPerson(Number(event.target.value));\n    setErrorUser(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (!newTodoTitle.trim() || !personID) {\n      setErrorTittle(!newTodoTitle.trim());\n      setErrorUser(!personID);\n\n      return;\n    }\n\n    if (!notValidPerson && !errorTittle) {\n      startId += 1;\n      const addTodo = {\n        id: startId,\n        title: newTodoTitle,\n        completed: false,\n        userId: personID,\n        user: getUser(personID),\n      };\n\n      todosList.push(addTodo);\n\n      setTodoTitle('');\n      setPerson(0);\n      setErrorUser(false);\n      setErrorTittle(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Please enter a title\"\n            value={newTodoTitle}\n            onChange={handleTodoTitle}\n          />\n\n          {errorTittle && <span className=\"error\">Please enter a title</span>}\n\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            placeholder=\"Please enter a title\"\n            value={personID}\n            onChange={handlePersonIDSelect}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option value={user.id} key={user.id}>{user.name}</option>\n            ))}\n          </select>\n\n          {notValidPerson\n            && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todosList} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}